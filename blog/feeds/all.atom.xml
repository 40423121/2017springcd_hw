<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>40423121上課報告</title><link href="./" rel="alternate"></link><link href="./feeds/all.atom.xml" rel="self"></link><id>./</id><updated>2017-06-01T00:00:00+08:00</updated><entry><title>2017.06.01 第十五週 練習1</title><link href="./wcm13.html" rel="alternate"></link><published>2017-06-01T00:00:00+08:00</published><updated>2017-06-01T00:00:00+08:00</updated><author><name>40423121</name></author><id>tag:,2017-06-01:./wcm13.html</id><summary type="html">&lt;p&gt;800x600 為畫布大小, 在畫布正中央畫一個半徑為 250 畫素, 壓力角 20, 齒數為 36 齒, 且只有上半齒形的漸開線正齒輪輪廓.
&lt;/p&gt;
&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script src="../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 繪圖--&gt;

&lt;canvas id="onegear" width="800" height="600"&gt;&lt;/canvas&gt;

&lt;div id="onegear_div" width="250" height="20"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # rot 為旋轉角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx, midy, midx, midy-rp)
        # 畫出 rp 圓, 畫圓函式尚未定義
        #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # 畫出 ra 圓, 畫圓函式尚未定義
        #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1)
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # 畫出 rb 圓 (基圓), 畫圓函式尚未定義
        #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)
                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)
canvas = doc['onegear']
ctx = canvas.getContext("2d")
x = (canvas.width)/2
y = (canvas.height)/2
r =250
# 齒數
n = 36
# 壓力角
pa = 20
Spur(ctx).Gear(x, y, r, n, pa, "blue")

ctx.beginPath()
ctx.lineWidth = "600"
ctx.strokeStyle = "white"
ctx.moveTo(0,600)
ctx.lineTo(800,600)
ctx.stroke()
&lt;/script&gt;</summary><category term="40423121"></category></entry><entry><title>2017.05.18 第十三週</title><link href="./wcm12.html" rel="alternate"></link><published>2017-05-18T00:00:00+08:00</published><updated>2017-05-18T00:00:00+08:00</updated><author><name>40423121</name></author><id>tag:,2017-05-18:./wcm12.html</id><summary type="html">&lt;p&gt;(測試中)繪製2D 正齒輪(17t-11t-13t-14t) 
&lt;/p&gt;
&lt;p&gt;(問題)第三齒和第四齒無法囓合&lt;/p&gt;
&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script src="./../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="./../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;canvas id="onegear" width="800" height="600"&gt;&lt;/canvas&gt;

&lt;div id="onegear_div" width="800" height="20"&gt;&lt;/div&gt;

&lt;p&gt;&lt;input id="n1" value="13"&gt;&lt;/input&gt;&lt;br /&gt;
&lt;input id="n2" value="11"&gt;&lt;/input&gt;&lt;br /&gt;
&lt;input id="n3" value="17"&gt;&lt;/input&gt;&lt;br /&gt;
&lt;input id="n4" value="14"&gt;&lt;/input&gt;&lt;br /&gt;

&lt;button id="button"&gt;Set Number of Gears&lt;/button&gt;&lt;/p&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
from browser import html
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx, midy, midx, midy-rp)
        # 畫出 rp 圓, 畫圓函式尚未定義
        #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # 畫出 ra 圓, 畫圓函式尚未定義
        #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1)
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # 畫出 rb 圓 (基圓), 畫圓函式尚未定義
        #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)
                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)

canvas = doc['onegear']
ctx = canvas.getContext("2d")

# 以 button 驅動的事件函式
def setgearnumber(e):
    ctx.clearRect(0, 0, canvas.width, canvas.height)
    x = (canvas.width)/2
    y = (canvas.height)/2
    if doc["n1"].value.isdigit():
        n17 = int(doc["n1"].value)
    else:
        n17 = 17

    if doc["n2"].value.isdigit():
        n11 = int(doc["n2"].value)
    else:
        n11 = 11

    if doc["n3"].value.isdigit():
        n13 = int(doc["n3"].value)
    else:
        n13 = 13

    if doc["n4"].value.isdigit():
        n14 = int(doc["n4"].value)
    else:
        n14 = 14

    # 只使用畫布高度的 80%
    canvas_size = canvas.height*0.4
    r17 = canvas_size*n17/(n17+n11+n13+n14)
    r11 = canvas_size*n11/(n17+n11+n13+n14)
    r13 = canvas_size*n13/(n17+n11+n13+n14)
    r14 = canvas_size*n14/(n17+n11+n13+n14)
    # 計算各齒輪中心座標
    x17 = x - r17-r11
    y17 = y

    x11 = x 
    y11 = y

    x13 = x + r11+r13
    y13 = y

    x14 = x + r11+r13
    y14 = y+r13+r14

    pa = 20
    # 開始繪製齒輪
    # 儲存原有的座標系統
    ctx.save()
    # 平移到齒輪圓心
    ctx.translate(x17, y17)
    # 以齒輪圓心旋轉 90 度, 讓紅色標線在齒輪右側保持水平
    ctx.rotate(90*deg)
    # 平移回原來的座標原點
    ctx.translate(-x17, -y17)
    gear17 = Spur(ctx).Gear(x17, y17, r17, n17, pa, "purple")
    # 回復原有的座標系統
    ctx.restore()

    ctx.save()
    ctx.translate(x11, y11)
    # 中間齒輪轉動 -90 度加上一齒, 可以與左側齒輪囓合
    ctx.rotate(-90*deg-math.pi/n11)
    ctx.translate(-x11, -y11)
    gear11 = Spur(ctx).Gear(x11, y11, r11, n11, pa, "blue")
    ctx.restore()

    ctx.save()
    ctx.translate(x13, y13)
    # 右側齒輪轉動 -90 度加上一齒, 可以與原來標線在左側水平的中間齒輪囓合, 但是目前中間齒輪的標線已經轉了 180 度加或減一次
    # 必須配合兩齒的速比轉換旋轉角, 以便讓中間齒輪與右側齒輪囓合
    ctx.rotate(-90*deg-math.pi/n13+(180*deg+math.pi/n11)*n11/n13)
    ctx.translate(-x13, -y13)
    gear13 = Spur(ctx).Gear(x13, y13, r13, n13, pa, "red")
    ctx.restore()

    ctx.save()
    ctx.translate(x14, y14)
    # 
    # 
    ctx.rotate(((-90*deg-math.pi/n13)+(180*deg+math.pi/n11)*n11/n13)+(180*deg+math.pi/n13)*n13/n14)
    ctx.translate(-x14, -y14)
    gear14 = Spur(ctx).Gear(x14, y14, r14, n14, pa, "black")
    ctx.restore()

setgearnumber(True)

'''
div = doc["onegear_div"]
form = html.FORM()
input1 = html.INPUT(type="text", id="n1", name="n1", value="13")
input2 = html.INPUT(type="text", id="n2", name="n2", value="11")
input3 = html.INPUT(type="text", id="n3", name="n3", value="19")
input4 = html.INPUT(type="text", id="n4", name="n4", value="14")
div &lt;= input1 + html.BR() + input2 + html.BR() + input3+ html.BR() + input4
'''
doc['button'].bind('click',setgearnumber)
&lt;/script&gt;</summary><category term="40423121"></category></entry><entry><title>2017.05.11 第十二週</title><link href="./wcm11.html" rel="alternate"></link><published>2017-05-11T00:00:00+08:00</published><updated>2017-05-11T00:00:00+08:00</updated><author><name>40423121</name></author><id>tag:,2017-05-11:./wcm11.html</id><summary type="html">&lt;p&gt;解釋為何需要減機、何謂漸開線.....等等
繪製齒輪
&lt;/p&gt;
&lt;script src="../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 繪圖--&gt;

&lt;p&gt;正齒輪嚙合的協同繪圖 (13t-17t):&lt;/p&gt;
&lt;canvas id='gear3' width='800' height='400'&gt;&lt;/canvas&gt;

&lt;script type="text/python3"&gt;
# 導入 browser 模組中的 document, 並設為 doc 變數
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # rot 為旋轉角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx, midy, midx, midy-rp)
        # 畫出 rp 圓, 畫圓函式尚未定義
        #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # 畫出 ra 圓, 畫圓函式尚未定義
        #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1)
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # 畫出 rb 圓 (基圓), 畫圓函式尚未定義
        #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)

                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)

# 準備在 id="gear3" 的 canvas 中繪圖
canvas = doc["gear3"]
ctx = canvas.getContext("2d")

# 模數決定齒的尺寸大小, 囓合齒輪組必須有相同的模數與壓力角
# 壓力角 pa 單位為角度
pa = 20
# 第1齒輪齒數
n_g1 = 13
# 第2齒輪齒數
n_g2 = 17
# 第3齒輪齒數
n_g3 = 11
# m 為模數, 根據畫布的寬度, 計算適合的模數大小
m = (0.8*canvas.width)/(n_g1+n_g2+n_g3)
# 根據模數 m, 計算各齒輪的節圓半徑
rp_g1 = m*n_g1/2
rp_g2 = m*n_g2/2
rp_g3 = m*n_g3/2
#單一正齒輪繪圖呼叫格式 Spur(ctx).Gear(x, y, r, n, pa, "blue")
# 開始繪製囓合齒輪輪廓
# 繪圖第1齒輪的圓心座標, 因為希望繪圖佔去 canvas.width 的 80%, 所以兩邊各預留 10% 距離
x_g1 = canvas.width*0.1+rp_g1
# y 方向繪圖區域上方預留 canvas.height 的 20%
y_g1 = canvas.height*0.2+rp_g1
# 第2齒輪的圓心座標, 假設排列成水平, 表示各齒輪圓心 y 座標相同
x_g2 = x_g1 + rp_g1 + rp_g2
y_g2 = y_g1
# 第3齒輪的圓心座標
x_g3 = x_g1 + rp_g1 + 2*rp_g2 + rp_g3
y_g3 = y_g1

# 將第1齒輪順時鐘轉 90 度, 也就是 math.pi/2
# 使用 ctx.save() 與 ctx.restore() 以確保各齒輪以相對座標進行旋轉繪圖
ctx.save()
# translate to the origin of second gear
ctx.translate(x_g1, y_g1)
# rotate to engage
ctx.rotate(math.pi/2)
# put it back
ctx.translate(-x_g1, -y_g1)
# 繪製第一個齒輪輪廓
Spur(ctx).Gear(x_g1, y_g1, rp_g1, n_g1, pa, "blue")
ctx.restore()

# 將第2齒輪逆時鐘轉 90 度之後, 再多轉一齒, 以便與第1齒輪進行囓合
ctx.save()
# translate to the origin of second gear
ctx.translate(x_g2, y_g2)
# rotate to engage
ctx.rotate(-math.pi/2-math.pi/n_g2)
# put it back
ctx.translate(-x_g2, -y_g2)
Spur(ctx).Gear(x_g2, y_g2, rp_g2, n_g2, pa, "black")
ctx.restore()

&lt;/script&gt;

&lt;p&gt;1.為何需要減速機?&lt;/p&gt;
&lt;p&gt;使用它的目的是降低轉速，增加轉矩。&lt;/p&gt;
&lt;p&gt;降速同時提高輸出扭矩，扭矩輸出比例按電機輸出乘減速比，但要注意不能超出減速機額定扭矩。&lt;/p&gt;
&lt;p&gt;減速同時降低了負載的慣量，慣量的減少為減速比的平方。 &lt;/p&gt;
&lt;p&gt;2.何謂漸開線?&lt;/p&gt;
&lt;p&gt;一頭固定，一頭向外拉開， &lt;/p&gt;
&lt;p&gt;則拉開的這個線頭所走的軌跡，就是漸開線。 &lt;/p&gt;
&lt;p&gt;&lt;a href="http://imgur.com/SmCRub1"&gt;&lt;img src="http://i.imgur.com/SmCRub1.gif" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3.如何畫漸開線正齒輪輪廓?&lt;/p&gt;</summary><category term="40423121"></category></entry><entry><title>2017.05.04 第十一週</title><link href="./wcm10.html" rel="alternate"></link><published>2017-05-04T00:00:00+08:00</published><updated>2017-05-04T00:00:00+08:00</updated><author><name>40423121</name></author><id>tag:,2017-05-04:./wcm10.html</id><summary type="html">&lt;p&gt;繪製2D齒輪和網誌模擬轉動齒輪&lt;/p&gt;


&lt;p&gt;&lt;a href="https://40423107.github.io/2016fallcadp_hw/blog/20170506di-shi-yi-zhou.html"&gt;齒輪嚙合傳動13齒&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://40423107.github.io/2016fallcadp_hw/blog/20170507di-shi-yi-zhou.html"&gt;齒輪嚙合傳動17齒&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;利用漸開線原理, 以 Brython 繪製單一正齒輪廓:11齒&lt;/h2&gt;
&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script src="../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 繪圖--&gt;

&lt;canvas id="onegear" width="800" height="600"&gt;&lt;/canvas&gt;

&lt;div id="onegear_div" width="800" height="20"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # rot 為旋轉角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx, midy, midx, midy-rp)
        # 畫出 rp 圓, 畫圓函式尚未定義
        #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # 畫出 ra 圓, 畫圓函式尚未定義
        #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1)
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # 畫出 rb 圓 (基圓), 畫圓函式尚未定義
        #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)
                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)
canvas = doc['onegear']
ctx = canvas.getContext("2d")
x = (canvas.width)/2
y = (canvas.height)/2
r = 0.8*(canvas.height/2)
# 齒數
n = 11
# 壓力角
pa = 20
Spur(ctx).Gear(x, y, r, n, pa, "blue")
&lt;/script&gt;

&lt;!-- 以下處理 Cango Spur Gear --&gt;

&lt;!-- Cango 程式庫 --&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
/Cango-9v05-min.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
/CangoAxes-2v09.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
/CangoAnimation-5v00.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
/gearUtils-05.js"&gt;&lt;/script&gt;

&lt;canvas id='cango_gear' width='800' height='750'&gt;&lt;/canvas&gt;

&lt;script type="text/python"&gt;
# 將 導入的 document 設為 doc 主要原因在於與舊程式碼相容
from browser import document as doc
# 由於 Python3 與 Javascript 程式碼已經不再混用, 因此來自 Javascript 的變數, 必須居中透過 window 物件轉換
from browser import window
import math

# 主要用來取得畫布大小
canvas = doc["cango_gear"]
# 此程式採用 Cango Javascript 程式庫繪圖, 因此無需 ctx
ctx = canvas.getContext("2d")
cango = window.Cango.new
# 針對變數的轉換, shapeDefs 在 Cango 中資料型別為變數, 可以透過 window 轉換
shapedefs = window.shapeDefs
# 目前 Cango 結合 Animation 在 Brython 尚無法運作, 此刻只能繪製靜態圖形
# in CangoAnimation.js
#interpolate1 = window.interpolate
# Cobi 與 createGearTooth 都是 Cango Javascript 程式庫中的物件
#cobj = window.Cobj.new
shape = window.Shape.new
path = window.Path.new
creategeartooth = window.createGearTooth.new

tweener = window.Tweener.new
# 經由 Cango 轉換成 Brython 的 cango, 指定將圖畫在 id="cango_gear" 的 canvas 上
cgo = cango("cango_gear")

######################################
# 畫正齒輪輪廓
#####################################
# n 為齒數
n = 11
# pa 為壓力角
pa = 25
# m 為模數, 根據畫布的寬度, 計算適合的模數大小
# Module = mm of pitch diameter per tooth
m = 0.8*canvas.width/n
# pr 為節圓半徑
pr = n*m/2 # gear Pitch radius
# generate gear
data = creategeartooth(m, n, pa)
# Brython 程式中的 print 會將資料印在 Browser 的 console 區
#print(data)
gearTooth = shape(data, {
  "fillColor":"#ddd0dd",
  "border": True,
  "strokeColor": "#606060" })
gearTooth.rotate(180/n) # rotate gear 1/2 tooth to mesh
# 單齒的齒形資料經過旋轉後, 將資料複製到 gear 物件中
gear = gearTooth.dup()
# gear 為單一齒的輪廓資料
#cgo.render(gearTooth)

# 利用單齒輪廓旋轉, 產生整個正齒輪外形
for i in range(1, n):
    # 將 gearTooth 中的資料複製到 newTooth
    newTooth = gearTooth.dup()
    # 配合迴圈, newTooth 的齒形資料進行旋轉, 然後利用 appendPath 方法, 將資料併入 gear
    newTooth.rotate(360*i/n)
    # appendPath 為 Cango 程式庫中的方法, 第二個變數為 True, 表示要刪除最前頭的 Move to SVG Path 標註符號
    gear.appendPath(newTooth, True) # trim move command = True

# 建立軸孔
# add axle hole, hr 為 hole radius
hr = 0.6*pr # diameter of gear shaft
shaft = path(shapedefs.circle(hr))
shaft.revWinding()
gear.appendPath(shaft) # retain the 'moveTo' command for shaft sub path

# setup the animation
# backlash (mm)
bklsh = 0.04*m
# centre shift to make backlash
dC = bklsh/(2*math.tan(math.pi*pa/180))
# np 為小齒輪齒數
np = 11
# gear ratio
gr = n/np              
gearConfig = {'cx':-pr, 'cy':0, 'degs':[0, 360]}
# gr*0.666 rpm
#pinionConfig = {'cx':pr+dC, 'cy':0, 'degs':[0, -gr*360]}
# 0.666 rpm
twnr = tweener(0, 90000, "loop")

cx = canvas.width/2
cy = canvas.height/2
#gear.translate(cx, cy)
# render 繪出靜態正齒輪輪廓
#cgo.render(gear)
# 利用 gear 資料複製一份, 命名為 gear1
gear1 = gear.dup()

from time import time
from browser.timer import request_animation_frame as raf
from browser.timer import set_interval

deg = math.pi/180

def draw():
    cgo.clearCanvas()
    gear.rotate(2*deg)
    # 在特定位置, 以特定 scale, 特定 degs 執行 render
    cgo.render(gear, {'x':cx-pr/2, 'y':cy, 'scl':0.5, 'degs':0})
    gear1.rotate(-2*deg)
    cgo.render(gear1, {'x':cx+pr*2*0.5-pr/2, 'y':cy, 'scl':0.5, 'degs':0})

set_interval(draw, 2)
&lt;/script&gt;</summary><category term="40423121"></category></entry><entry><title>2017.04.27 第十週</title><link href="./wcm9.html" rel="alternate"></link><published>2017-04-27T00:00:00+08:00</published><updated>2017-04-27T00:00:00+08:00</updated><author><name>40423121</name></author><id>tag:,2017-04-27:./wcm9.html</id><summary type="html">&lt;p&gt;近端程式運算模擬和線上輸入運算模擬&lt;/p&gt;


&lt;p&gt;近端程式運算影片&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/IPpYa1ieEZ0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;線上輸入運算模擬&lt;/p&gt;
&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script src="../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 畫四連桿 trace point 路徑--&gt;

&lt;!--&lt;canvas id="w10" width="800" height="600"&gt;&lt;/canvas&gt;--&gt;

&lt;div id="container" width="600" height="400"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
from browser import html
import math
container = doc['container']
degree = math.pi/180
def button1(event):
    a = input("give me a")
    container &lt;= str(math.cos(60*degree)+float(a))
doc["button1"].bind("click", button1)
&lt;/script&gt;

&lt;p&gt;&lt;button id="button1"&gt;按下取 a 值&lt;/button&gt;&lt;/p&gt;</summary><category term="40423121"></category></entry><entry><title>2017.04.20 期中協同查驗與自評</title><link href="./wcm8.html" rel="alternate"></link><published>2017-04-20T00:00:00+08:00</published><updated>2017-04-20T00:00:00+08:00</updated><author><name>40423121</name></author><id>tag:,2017-04-20:./wcm8.html</id><summary type="html">&lt;p&gt;繪製圖形和組立零件&lt;/p&gt;


&lt;p&gt;&lt;a href="http://imgur.com/gPpRe3v"&gt;&lt;img src="http://i.imgur.com/gPpRe3v.jpg" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://imgur.com/1772Kqd"&gt;&lt;img src="http://i.imgur.com/1772Kqd.jpg" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="40423121"></category></entry><entry><title>2017.04.06 第七週</title><link href="./wcm7.html" rel="alternate"></link><published>2017-04-06T00:00:00+08:00</published><updated>2017-04-06T00:00:00+08:00</updated><author><name>40423121</name></author><id>tag:,2017-04-06:./wcm7.html</id><summary type="html">&lt;p&gt;繪製八連桿和V-rep 平面機構運動模擬&lt;/p&gt;


&lt;p&gt;零件1 &lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/Nd6ntkzt3XU" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;零件2&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/7ir4VFgFPsc" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;零件3&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/RJNgQX1YAvw" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;零件4&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/OQ1EohxpcdQ" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;零件5&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/LaZsr36sgB4" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;零件6&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/I2_DZla4Qqs" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;零件7&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/pvQPTxCU4HU" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;零件8&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/D8bjM_QhR5s" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;八連桿組合&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/933_dofQZR4" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;v-rep模擬 &lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/9P485sn6UP4" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;作業心得:繪製8連桿模擬運行機構, 了解運作原理.再利用v-rep進行模擬,模擬當中遇到約束不夠好問題,會造成零件跑掉或無法約束等問題.&lt;/p&gt;</summary><category term="40423121"></category></entry><entry><title>2017.03.30 第六週</title><link href="./wcm6.html" rel="alternate"></link><published>2017-03-30T00:00:00+08:00</published><updated>2017-03-30T00:00:00+08:00</updated><author><name>40423121</name></author><id>tag:,2017-03-30:./wcm6.html</id><summary type="html">&lt;p&gt;繪製四連桿和V-rep 平面機構運動模擬&lt;/p&gt;


&lt;p&gt;零件1 &lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/VaeVaffGqWg" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;零件2&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/S-ulOOafpGE" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;零件3&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/gz5WJAdZ3b8" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;零件4&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/vXX-saRb6zs" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;組合&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/OW-WoiO9LgU" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;組合修正 
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/YTzNXJmiBvE" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;v-rep 模擬  (模擬錯誤
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/D8Qw7ImfAOI" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;v-rep 模擬 (修正
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/4Rw2ofzQG9g" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;作業心得:繪製零件和模擬機構和導入零件組合圖進行模擬
因之前不了解約束條件,所以第一次組合忘記許多約束條件,目前已經有改正.
目前v-rep 模擬無法進行模擬,其中一個馬達錯誤導致模擬不能,目前還在想辦法.
以解決模擬錯誤,因該是每個零件關係結構鍊跟一些設定少設定才會有此問題&lt;/p&gt;</summary><category term="40423121"></category></entry><entry><title>2017.03.23 第五週</title><link href="./wcm5.html" rel="alternate"></link><published>2017-03-23T00:00:00+08:00</published><updated>2017-03-23T00:00:00+08:00</updated><author><name>40423121</name></author><id>tag:,2017-03-23:./wcm5.html</id><summary type="html">&lt;p&gt;V-REP 定位軸心&lt;/p&gt;


&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/5ePLMoDbIv4" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;心得:利用之前教的solvespace繪製零件和輸出stl到v-rep上,
再利用v-rep的模擬功能,新增馬達定位馬達到連接軸上,進行旋轉模擬.&lt;/p&gt;</summary><category term="40423121"></category></entry><entry><title>2017.03.16 第四週</title><link href="./wcm4.html" rel="alternate"></link><published>2017-03-16T00:00:00+08:00</published><updated>2017-03-16T00:00:00+08:00</updated><author><name>40423121</name></author><id>tag:,2017-03-16:./wcm4.html</id><summary type="html">&lt;p&gt;組立連桿&lt;/p&gt;


&lt;p&gt;solvespace&lt;/p&gt;
&lt;p&gt;零件1
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/PeUrDVzAAgM" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;零件2
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/D9YmzWJfRCg" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;零件3
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/_BGtSZQkCtA" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;組合
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/a_9Q8I2EYL0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;連桿轉入 V-REP&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/P5DdOZZ3qcs" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;心得
繪製零件和組形成旋轉部件,還有導入v-rep&lt;/p&gt;</summary><category term="40423121"></category></entry><entry><title>2017.03.09 第三週</title><link href="./wcm3.html" rel="alternate"></link><published>2017-03-09T00:00:00+08:00</published><updated>2017-03-09T00:00:00+08:00</updated><author><name>40423121</name></author><id>tag:,2017-03-09:./wcm3.html</id><summary type="html">&lt;p&gt;翻譯影片&lt;/p&gt;


&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/2r5OHm7_FGc" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;翻譯逐字稿 The 2017 HyperWorks release has a lot of enhancements to the modeling and assembly capabilities to the software.&lt;/p&gt;
&lt;p&gt;HyperWorks 2017版對軟體的建模和組裝功能進行了大量增強&lt;/p&gt;
&lt;p&gt;So we put in a new parts browser with a built-in part library.&lt;/p&gt;
&lt;p&gt;所以我們把新的零件瀏覽器放進內置零件庫&lt;/p&gt;
&lt;p&gt;The part library is a great tool for storing and loading work in progress.&lt;/p&gt;
&lt;p&gt;零件庫是很好的工具用於存儲和加載工作。&lt;/p&gt;
&lt;p&gt;So you can store a catalog of all the common parts that a workgroup needs to use,&lt;/p&gt;
&lt;p&gt;因此你可以存儲工作所需要使用的共用的零件，&lt;/p&gt;
&lt;p&gt;so they can download their models from their PLM system&lt;/p&gt;
&lt;p&gt;所以他們可以從他們的PLM系統下載他們的模型&lt;/p&gt;
&lt;p&gt;Dand store them locally in a parts library for a work in progress.&lt;/p&gt;
&lt;p&gt;並將它們存儲在本地的零件庫中為進行中的工作所用。&lt;/p&gt;
&lt;p&gt;And it keeps revision control on them so they can back up to the different versions&lt;/p&gt;
&lt;p&gt;它可以保有每次的修訂，所以他可以備份每個不同的版本 And they can also build different configurations now of their models.&lt;/p&gt;
&lt;p&gt;現在他們也可以為他們的模型建立不同的配置。&lt;/p&gt;
&lt;p&gt;in the configurations modeler now they can import parts from part&lt;/p&gt;
&lt;p&gt;現在他們可以在設定配置時從零件庫導入零件&lt;/p&gt;
&lt;p&gt;and then group them into what we call part sets,&lt;/p&gt;
&lt;p&gt;然後將它們組成我們所謂的部分集&lt;/p&gt;
&lt;p&gt;which are convenient groupings of parts.&lt;/p&gt;
&lt;p&gt;以便於我們分組部件。&lt;/p&gt;
&lt;p&gt;And then they can drag those parts together into assemblies,&lt;/p&gt;
&lt;p&gt;然後他們可以利用這些零件進行組裝，&lt;/p&gt;
&lt;p&gt;,and configure them for different load cases or different variations of their models.&lt;/p&gt;
&lt;p&gt;並針對不同負載情況或不同的模型配置它們。&lt;/p&gt;
&lt;p&gt;The other feature of having parts in the software is we do part instancing now, too.&lt;/p&gt;
&lt;p&gt;軟體的另一個特徵是，現在我們也做了部件的實體化。&lt;/p&gt;
&lt;p&gt;So if you load in a part that has multiple instances through the model, we support that.&lt;/p&gt;
&lt;p&gt;因此，如果您要加載多個實體的零件到模型，我們有支援。&lt;/p&gt;
&lt;p&gt;We don't have to create multiple copies of it.&lt;/p&gt;
&lt;p&gt;我們不需要創建多個零件副本。&lt;/p&gt;
&lt;p&gt;We can actually do the instancing,which is very memory efficient.&lt;/p&gt;
&lt;p&gt;我們可以的有效利用內存。&lt;/p&gt;
&lt;p&gt;Also in the model building assembly tool set is enhanced ID management as well.&lt;/p&gt;
&lt;p&gt;也在模型建立裝配,工具集以及增强ID管理。&lt;/p&gt;
&lt;p&gt;So not only can we assign IDs based on different rules that you define in the software, but you can import ID systems&lt;/p&gt;
&lt;p&gt;因此我們不僅可以根據你軟件中定義的規則分配不同ID，也可以導入ID系統&lt;/p&gt;
&lt;p&gt;from spreadsheets, XML files, database, billboard and so forth&lt;/p&gt;
&lt;p&gt;從試算表，XML檔案，資料庫，看板等等&lt;/p&gt;
&lt;p&gt;that are then used when it does the renumbering or the assembly of the model.&lt;/p&gt;
&lt;p&gt;然後在對模型進行重新編號或裝配時使用。&lt;/p&gt;
&lt;p&gt;it has to resolve part collisions.&lt;/p&gt;
&lt;p&gt;它必须解决部分衝突。&lt;/p&gt;
&lt;p&gt;Really important of doing model assembly is connecting all those parts together.&lt;/p&gt;
&lt;p&gt;做模型裝配真正重要的是把這些所有部分連接在一起。&lt;/p&gt;
&lt;p&gt;Connectors are really vital to the overall assembly process.&lt;/p&gt;
&lt;p&gt;連接器對整個裝配過程至關重要。&lt;/p&gt;
&lt;p&gt;The quality of the connector that you create really determine the outcome of the quality of the overall assembled model as well.&lt;/p&gt;
&lt;p&gt;D接合處的品質決定了整體組裝模型的品質。&lt;/p&gt;
&lt;p&gt;So for us to get a good high fidelity solution, you have to have a really good connection generation as well.&lt;/p&gt;
&lt;p&gt;所以為了讓我們得到一個良好的解析度，必須有更密集的連接點。&lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/209207407" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/209207407"&gt;Produce&lt;/a&gt; from &lt;a href="https://vimeo.com/user57418042"&gt;曾繼緯&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;翻譯逐字稿 The core of HyperMesh has always been about meshing and geometry cleanup， HyperMesh的核心是關於網路劃分和幾何清理，&lt;/p&gt;
&lt;p&gt;and generating a really good solver deck. 並且產生一個非常好的解算平台&lt;/p&gt;
&lt;p&gt;So we've continued to stay really focused on geometry ， 所以我們持續專注於幾何&lt;/p&gt;
&lt;p&gt;generation and clean up， 生成和清理&lt;/p&gt;
&lt;p&gt;mesh generation to improve the quality of the mesh， 藉由網格生成以提高網格質量&lt;/p&gt;
&lt;p&gt;the flow of the mesh. 網格的流動&lt;/p&gt;
&lt;p&gt;And within Altair， 在Altair裡&lt;/p&gt;
&lt;p&gt;our own solver and modeling visualization teams work very closely together 我們的解算器和建模可以清楚的看見團隊緊密合作&lt;/p&gt;
&lt;p&gt;to make sure we're supporting all the latest enhancements to the Altair solvers 以確保我們增強所有最新的Altair解算器&lt;/p&gt;
&lt;p&gt;and the modeling visualization side of things. 並且可以清楚看見物體的模組&lt;/p&gt;
&lt;p&gt;Simlab is always about automate， automate，automated. Simlab是關於自動化，自動化，自動化.&lt;/p&gt;
&lt;p&gt;We continue to improve the user experience. 我們持續改善用戶體驗&lt;/p&gt;
&lt;p&gt;We've added the mesh fading approach in the graphics that we use in HyperMesh now. 我們在HyperMesh中使用的圖形中添加了網格衰減方法。&lt;/p&gt;
&lt;p&gt;We've added a new measurement tool, 我們添加了一個新的測量工具，&lt;/p&gt;
&lt;p&gt;we've included JT and Catia direct readers. 我們包括JT和Catia的讀者&lt;/p&gt;
&lt;p&gt;We have new macro tools for creating bearings and welds. 我們新的巨集工具用於創建軸承與焊接&lt;/p&gt;
&lt;p&gt;We put a lot of effort into the CFD pre-processing in simLab now as well. 我們在simLab中也投入了大量的資源進行CFD的預先處理。&lt;/p&gt;
&lt;p&gt;And we support the new nanoFluidx SPH fluid code from Altair. 以及我們的支援來自於Altair新的nanoFluidX SPH流體代碼。&lt;/p&gt;
&lt;p&gt;And we now have support for FEKO inside of SimLab. 而現在我們已經在SimLab中支援FEKO。&lt;/p&gt;
&lt;p&gt;And very exciting,we'ce added a Python intreface to SimLab as well. 非常令人振奮的是，我們還為SimLab添加了一個Python介面。&lt;/p&gt;
&lt;p&gt;There's a lot of work going on in the crash domain side of HyperMesh right now. 現在在HyperMesh的損毀處有很多修復工作正在進行。&lt;/p&gt;
&lt;p&gt;So we've kind of gone back to the drawing board on creating a new dummy positioner that has a new kinematic solver nuilt into it, 所以我們回到繪圖板上創建一個新的虛擬定位器，其中內置了一個新的運動解碼器，&lt;/p&gt;
&lt;p&gt;and new graphical manipulators that make position a dummy in the vehicle much simpler, 以及新的圖形操縱器，使位置在虛擬的傳送中變得更簡單，&lt;/p&gt;
&lt;p&gt;and actually kind of fun. 實際上會有趣。&lt;/p&gt;
&lt;p&gt;We've also employed that same kinematic solver in a seat positioning tool. 我們還在位置定位工具中使用了相同的運動解碼器。&lt;/p&gt;
&lt;p&gt;So now it will simulate all the mechanisms that actually articulate the seat in the vehicle 所以現在它將模擬所有的實際機構在傳送位置的機制&lt;/p&gt;
&lt;p&gt;so you can get that into the correct position as well. 所以你可以得到正確的位置。&lt;/p&gt;
&lt;p&gt;we've had some great enhancements to HyperView. 我們對HyperView進行了一些重大的改進。&lt;/p&gt;
&lt;p&gt;you can directly interact with the legends now to control what's on the screen in terms the contours of the different data types. 您可以直接與圖例進行互動，以便根據不同數據類型的週線控制屏幕上的內容。&lt;/p&gt;
&lt;p&gt;where you can have multiple results 你可以有多個結果&lt;/p&gt;
&lt;p&gt;files associated with a model file so 文件與模組文件相關聯等&lt;/p&gt;
&lt;p&gt;that makes it really easy to bring in 所以使它真的很容易帶來&lt;/p&gt;
&lt;p&gt;results between different runs into the 結果之間的不同運行&lt;/p&gt;
&lt;p&gt;same model space 相同模組空間&lt;/p&gt;
&lt;p&gt;and compare results HyperGraph is 並比較HyperGraph的結果&lt;/p&gt;
&lt;p&gt;really the best plotting system for CAE results. 真的是CAE結果的最佳繪圖系統。&lt;/p&gt;
&lt;p&gt;it's essentially a data 它本質上是一個數據&lt;/p&gt;
&lt;p&gt;miner that lets you go through all the 讓你經歷所有&lt;/p&gt;
&lt;p&gt;results files, generate large reports with 結果文件，生成大型報告和&lt;/p&gt;
&lt;p&gt;many points, within the curves. And once 許多點，在曲線內。 在一次&lt;/p&gt;
&lt;p&gt;you're established a 你成立了一個&lt;/p&gt;
&lt;p&gt;reports that you're looking at, you 你在看報告，你&lt;/p&gt;
&lt;p&gt;can make global changes across the 可以使全球變化跨越這&lt;/p&gt;
&lt;p&gt;entire report so it's a great automation 整個報告，所以它是一個偉大的自動化&lt;/p&gt;
&lt;p&gt;Tool for post-processing 工具後處理翻譯： The core of HyperMesh has always been about meshing and geometry cleanup， HyperMesh的核心是關於網路劃分和幾何清理，&lt;/p&gt;
&lt;p&gt;and generating a really good solver deck. 並且產生一個非常好的解算平台&lt;/p&gt;
&lt;p&gt;So we've continued to stay really focused on geometry ， 所以我們持續專注於幾何&lt;/p&gt;
&lt;p&gt;generation and clean up， 生成和清理&lt;/p&gt;
&lt;p&gt;mesh generation to improve the quality of the mesh， 藉由網格生成以提高網格質量&lt;/p&gt;
&lt;p&gt;the flow of the mesh. 網格的流動&lt;/p&gt;
&lt;p&gt;And within Altair， 在Altair裡&lt;/p&gt;
&lt;p&gt;our own solver and modeling visualization teams work very closely together 我們的解算器和建模可以清楚的看見團隊緊密合作&lt;/p&gt;
&lt;p&gt;to make sure we're supporting all the latest enhancements to the Altair solvers 以確保我們增強所有最新的Altair解算器&lt;/p&gt;
&lt;p&gt;and the modeling visualization side of things. 並且可以清楚看見物體的模組&lt;/p&gt;
&lt;p&gt;Simlab is always about automate， automate，automated. Simlab是關於自動化，自動化，自動化.&lt;/p&gt;
&lt;p&gt;We continue to improve the user experience. 我們持續改善用戶體驗&lt;/p&gt;
&lt;p&gt;We've added the mesh fading approach in the graphics that we use in HyperMesh now. 我們在HyperMesh中使用的圖形中添加了網格衰減方法。&lt;/p&gt;
&lt;p&gt;We've added a new measurement tool, 我們添加了一個新的測量工具，&lt;/p&gt;
&lt;p&gt;we've included JT and Catia direct readers. 我們包括JT和Catia的讀者&lt;/p&gt;
&lt;p&gt;We have new macro tools for creating bearings and welds. 我們新的巨集工具用於創建軸承與焊接&lt;/p&gt;
&lt;p&gt;We put a lot of effort into the CFD pre-processing in simLab now as well. 我們在simLab中也投入了大量的資源進行CFD的預先處理。&lt;/p&gt;
&lt;p&gt;And we support the new nanoFluidx SPH fluid code from Altair. 以及我們的支援來自於Altair新的nanoFluidX SPH流體代碼。&lt;/p&gt;
&lt;p&gt;And we now have support for FEKO inside of SimLab. 而現在我們已經在SimLab中支援FEKO。&lt;/p&gt;
&lt;p&gt;And very exciting,we'ce added a Python intreface to SimLab as well. 非常令人振奮的是，我們還為SimLab添加了一個Python介面。&lt;/p&gt;
&lt;p&gt;There's a lot of work going on in the crash domain side of HyperMesh right now. 現在在HyperMesh的損毀處有很多修復工作正在進行。&lt;/p&gt;
&lt;p&gt;So we've kind of gone back to the drawing board on creating a new dummy positioner that has a new kinematic solver nuilt into it, 所以我們回到繪圖板上創建一個新的虛擬定位器，其中內置了一個新的運動解碼器，&lt;/p&gt;
&lt;p&gt;and new graphical manipulators that make position a dummy in the vehicle much simpler, 以及新的圖形操縱器，使位置在虛擬的傳送中變得更簡單，&lt;/p&gt;
&lt;p&gt;and actually kind of fun. 實際上會有趣。&lt;/p&gt;
&lt;p&gt;We've also employed that same kinematic solver in a seat positioning tool. 我們還在位置定位工具中使用了相同的運動解碼器。&lt;/p&gt;
&lt;p&gt;So now it will simulate all the mechanisms that actually articulate the seat in the vehicle 所以現在它將模擬所有的實際機構在傳送位置的機制&lt;/p&gt;
&lt;p&gt;so you can get that into the correct position as well. 所以你可以得到正確的位置。&lt;/p&gt;
&lt;p&gt;we've had some great enhancements to HyperView. 我們對HyperView進行了一些重大的改進。&lt;/p&gt;
&lt;p&gt;you can directly interact with the legends now to control what's on the screen in terms the contours of the different data types. 您可以直接與圖例進行互動，以便根據不同數據類型的週線控制屏幕上的內容。&lt;/p&gt;
&lt;p&gt;where you can have multiple results 你可以有多個結果&lt;/p&gt;
&lt;p&gt;files associated with a model file so 文件與模組文件相關聯等&lt;/p&gt;
&lt;p&gt;that makes it really easy to bring in 所以使它真的很容易帶來&lt;/p&gt;
&lt;p&gt;results between different runs into the 結果之間的不同運行&lt;/p&gt;
&lt;p&gt;same model space 相同模組空間&lt;/p&gt;
&lt;p&gt;and compare results HyperGraph is 並比較HyperGraph的結果&lt;/p&gt;
&lt;p&gt;really the best plotting system for CAE results. CAE是最佳繪圖系統。&lt;/p&gt;
&lt;p&gt;it's essentially a data 它本質上是一個數據&lt;/p&gt;
&lt;p&gt;miner that lets you go through all the 讓你經歷所有&lt;/p&gt;
&lt;p&gt;results files, generate large reports with 結果文件，生成大型報告和&lt;/p&gt;
&lt;p&gt;many points, within the curves. And once 許多點，在曲線內。 在一次&lt;/p&gt;
&lt;p&gt;you're established a 你成立了一個&lt;/p&gt;
&lt;p&gt;reports that you're looking at, you 你在看報告，你&lt;/p&gt;
&lt;p&gt;can make global changes across the 可以跨越全球變化&lt;/p&gt;
&lt;p&gt;entire report so it's a great automation 整個報告，所以它是一個偉大的自動化&lt;/p&gt;
&lt;p&gt;Tool for post-processing 工具後處理&lt;/p&gt;
&lt;p&gt;翻譯心得:雖然都聽不太懂,不過利用youtube自動翻譯可以抓到他說了什麼單字和句型,減輕翻譯負擔.&lt;/p&gt;</summary><category term="40423121"></category></entry><entry><title>2017.03.02 第二週</title><link href="./wcm2.html" rel="alternate"></link><published>2017-03-02T00:00:00+08:00</published><updated>2017-03-02T00:00:00+08:00</updated><author><name>40423121</name></author><id>tag:,2017-03-02:./wcm2.html</id><summary type="html">&lt;p&gt;更改stunnel設定檔ip位址&lt;/p&gt;


&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/vYOvUufP5yo" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;v-rep solvespace輸入&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/XhxJC21pmXU" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;作業心得
學習如何在不同環境下利用可攜軟體進行設定變更ip 
v-rep solvespace輸入組件,讓solvespace繪製好的零件可以在其他軟體進行模擬&lt;/p&gt;</summary><category term="40423121"></category></entry><entry><title>2017.02.23 第一週</title><link href="./wcm.html" rel="alternate"></link><published>2017-02-23T00:00:00+08:00</published><updated>2017-02-23T00:00:00+08:00</updated><author><name>40423121</name></author><id>tag:,2017-02-23:./wcm.html</id><summary type="html">&lt;p&gt;利用solvespace及onshape組裝四連桿機構&lt;/p&gt;


&lt;p&gt;solvespace組裝影片&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/uMNMCOstOEs" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;onshape組裝四連桿機構&lt;/p&gt;
&lt;p&gt;30arm
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/eTnzHT5B24c" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;50arm
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/JY5sqfKPMIA" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;60arm
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/uI8F5R-VBTM" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;組裝影片
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/6ArbxB2uu14" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;組裝影片 修正
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/h0K4AJJ4Ep0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;作業心得
學習如何利用solvespace進行4連桿模擬合組裝
利用平行約束中心軸線讓零件與線架構草圖平行,再利用零件上的一點對基準平面進行約束,才使零件完全固定到上面.
onshape方面大同小異,繪製零件沒任何太多差異.但組裝上遇到問題,同時約束零件會跑掉,所以還在想辦法.
修正 : 原來是不熟悉介面,導致約束零件上發生錯誤,目前已作修正.&lt;/p&gt;</summary><category term="40423121"></category></entry></feed>